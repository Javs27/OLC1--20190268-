/* The following code was generated by JFlex 1.4.3 on 2/09/22 04:49 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/09/22 04:49 PM from the specification file
 * <tt>C:/Users/pjbco/Desktop/Segundo semestre 2022/Compi1/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\0\1\50\5\0"+
    "\1\35\1\37\1\6\1\52\1\41\1\36\1\42\1\4\12\2\1\0"+
    "\1\43\2\0\1\40\2\0\32\1\1\44\1\0\1\45\1\0\1\30"+
    "\1\0\1\23\1\20\1\11\1\25\1\22\1\13\1\17\1\24\1\7"+
    "\1\34\1\1\1\21\1\27\1\10\1\12\1\32\1\33\1\16\1\15"+
    "\1\14\1\26\1\31\2\1\1\51\1\1\1\46\1\52\1\47\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\15\1\1\5\1\1"+
    "\1\6\1\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\10\0\1\20\3\0\1\21\21\0"+
    "\1\22\1\23\3\0\1\24\2\0\1\21\5\0\1\25"+
    "\21\0\1\26\36\0\1\2\1\27\30\0\1\30\1\31"+
    "\24\0\1\24\7\0\1\21\1\0\1\30\23\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\53\0\327\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\53"+
    "\0\53\0\53\0\53\0\53\0\53\0\53\0\53\0\53"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\53\0\u050a\0\u0535\0\u0560\0\53\0\u058b\0\u05b6\0\u05e1"+
    "\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739"+
    "\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\53\0\u03b2"+
    "\0\u0866\0\u0891\0\u08bc\0\53\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\53\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\53\0\u0866\0\u124f"+
    "\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7"+
    "\0\u13d2\0\u0331\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4"+
    "\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c"+
    "\0\53\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1"+
    "\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u14ff\0\u19b3\0\u19de"+
    "\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\53"+
    "\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u1c63"+
    "\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb"+
    "\0\u1de6\0\u1e11\0\u1e3c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\2\1\14\1\15\1\2\1\16"+
    "\1\2\1\17\1\20\1\21\1\22\1\2\1\23\1\24"+
    "\1\2\1\25\2\2\1\26\1\27\1\30\1\2\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\2"+
    "\1\6\55\0\1\3\53\0\1\4\1\0\1\4\51\0"+
    "\1\41\1\0\1\42\54\0\1\43\16\0\1\44\35\0"+
    "\1\45\52\0\1\46\10\0\1\47\1\50\44\0\1\51"+
    "\11\0\1\52\31\0\1\53\11\0\1\54\40\0\1\55"+
    "\4\0\1\56\5\0\1\57\52\0\1\60\42\0\1\61"+
    "\50\0\1\62\4\0\1\63\16\0\1\64\26\0\1\65"+
    "\65\0\1\66\41\0\1\67\7\0\1\70\37\0\1\71"+
    "\12\0\1\72\1\73\30\0\2\74\4\0\21\74\1\0"+
    "\4\74\14\0\1\74\24\0\1\75\65\0\1\76\54\0"+
    "\1\77\12\0\5\100\1\0\45\100\5\101\1\0\45\101"+
    "\7\0\1\102\1\0\1\103\2\0\1\104\2\0\1\105"+
    "\65\0\1\106\34\0\1\51\46\0\1\107\16\0\1\110"+
    "\41\0\1\111\6\0\1\112\50\0\1\113\44\0\1\114"+
    "\45\0\1\115\54\0\1\116\56\0\1\117\53\0\1\120"+
    "\47\0\1\121\15\0\1\122\32\0\1\123\54\0\1\124"+
    "\66\0\1\125\44\0\1\126\55\0\1\51\36\0\1\127"+
    "\3\0\1\130\55\0\1\131\5\0\1\132\54\0\1\133"+
    "\44\0\1\134\40\0\1\135\3\0\1\136\107\0\1\135"+
    "\2\0\2\74\4\0\21\74\1\137\4\74\14\0\1\74"+
    "\17\0\1\140\36\0\1\141\50\0\6\101\1\142\44\101"+
    "\11\0\1\143\57\0\1\144\52\0\1\145\52\0\1\146"+
    "\64\0\1\147\34\0\1\55\63\0\1\150\51\0\1\151"+
    "\46\0\1\104\43\0\1\55\73\0\1\152\36\0\1\153"+
    "\6\0\1\154\36\0\1\155\71\0\1\156\36\0\1\157"+
    "\62\0\1\160\51\0\1\161\43\0\1\162\7\0\1\163"+
    "\37\0\1\164\15\0\1\165\36\0\1\166\63\0\1\167"+
    "\44\0\1\170\57\0\1\171\51\0\1\131\53\0\1\172"+
    "\41\0\1\173\54\0\1\174\52\0\1\175\63\0\1\55"+
    "\31\0\1\141\34\0\1\176\13\0\4\101\1\177\1\101"+
    "\1\142\44\101\7\0\1\200\65\0\1\201\52\0\1\202"+
    "\37\0\1\203\74\0\1\204\1\205\31\0\1\206\51\0"+
    "\1\207\57\0\1\210\11\0\1\211\2\0\1\212\43\0"+
    "\1\213\43\0\1\104\46\0\1\214\52\0\1\55\60\0"+
    "\1\215\50\0\1\216\60\0\1\217\40\0\1\220\60\0"+
    "\1\221\53\0\1\222\42\0\1\223\71\0\1\224\42\0"+
    "\1\55\57\0\1\225\51\0\1\104\42\0\1\226\54\0"+
    "\1\227\54\0\1\230\61\0\1\110\37\0\1\231\67\0"+
    "\1\232\40\0\1\233\64\0\1\234\46\0\1\235\52\0"+
    "\1\236\43\0\1\237\61\0\1\104\36\0\1\55\12\0"+
    "\1\57\37\0\1\71\12\0\1\240\40\0\1\241\61\0"+
    "\1\104\43\0\1\233\51\0\1\167\66\0\1\242\40\0"+
    "\1\243\53\0\1\104\66\0\1\244\37\0\1\245\53\0"+
    "\1\233\66\0\1\246\52\0\1\247\40\0\1\250\64\0"+
    "\1\251\44\0\1\252\53\0\1\167\36\0\1\253\64\0"+
    "\1\254\47\0\1\255\56\0\1\113\44\0\1\136\52\0"+
    "\1\171\46\0\1\256\64\0\1\257\53\0\1\260\51\0"+
    "\1\261\63\0\1\262\30\0\1\263\64\0\1\257\41\0"+
    "\1\264\50\0\1\265\60\0\1\266\46\0\1\167\63\0"+
    "\1\267\44\0\1\55\56\0\1\270\47\0\1\271\62\0"+
    "\1\272\36\0\1\273\70\0\1\274\36\0\1\275\66\0"+
    "\1\276\51\0\1\277\45\0\1\300\52\0\1\55\40\0"+
    "\1\301\51\0\1\164\66\0\1\302\50\0\1\156\53\0"+
    "\1\303\40\0\1\304\56\0\1\305\57\0\1\55\45\0"+
    "\1\306\52\0\1\307\54\0\1\310\52\0\1\311\56\0"+
    "\1\270\53\0\1\312\41\0\1\257\56\0\1\313\43\0"+
    "\1\110\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7783];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\21\1\11\11\10\0\1\11"+
    "\3\0\1\11\21\0\1\11\1\1\3\0\1\11\2\0"+
    "\1\1\5\0\1\1\21\0\1\11\36\0\1\11\1\1"+
    "\30\0\1\1\1\11\24\0\1\1\7\0\1\1\1\0"+
    "\1\11\23\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { lexeme=yytext(); return comentario1;
          }
        case 26: break;
        case 20: 
          { lexeme=yytext(); return tipo_dato;
          }
        case 27: break;
        case 21: 
          { lexeme=yytext(); return End;
          }
        case 28: break;
        case 12: 
          { lexeme = yytext(); return corchClose;
          }
        case 29: break;
        case 18: 
          { lexeme = yytext(); return asignar;
          }
        case 30: break;
        case 4: 
          { lexeme = yytext(); return operadorAritmetico;
          }
        case 31: break;
        case 22: 
          { lexeme = yytext(); return variable;
          }
        case 32: break;
        case 6: 
          { lexeme = yytext(); return parentOpen;
          }
        case 33: break;
        case 13: 
          { lexeme = yytext(); return keyopen;
          }
        case 34: break;
        case 5: 
          { lexeme = yytext(); return guion_low;
          }
        case 35: break;
        case 23: 
          { lexeme=yytext(); return comentario2;
          }
        case 36: break;
        case 7: 
          { lexeme = yytext(); return parenClose;
          }
        case 37: break;
        case 11: 
          { lexeme = yytext(); return corchOpen;
          }
        case 38: break;
        case 9: 
          { lexeme = yytext(); return punto;
          }
        case 39: break;
        case 10: 
          { lexeme = yytext();  return puntocoma;
          }
        case 40: break;
        case 24: 
          { lexeme = yytext(); return operadorRelacional;
          }
        case 41: break;
        case 1: 
          { return ERROR;
          }
        case 42: break;
        case 25: 
          { lexeme=yytext(); return inicio;
          }
        case 43: break;
        case 16: 
          { lexeme = yytext(); return operadorLogico;
          }
        case 44: break;
        case 3: 
          { /*ignore*/
          }
        case 45: break;
        case 14: 
          { lexeme = yytext(); return keyclose;
          }
        case 46: break;
        case 15: 
          { lexeme = yytext(); return comillas;
          }
        case 47: break;
        case 8: 
          { lexeme = yytext(); return coma;
          }
        case 48: break;
        case 2: 
          { lexeme = yytext(); return Numero;
          }
        case 49: break;
        case 17: 
          { lexeme=yytext(); return Reservadas;
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
